// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/22/2022 09:35:28"
                                                                                
// Verilog Test Bench template for design : alu
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module alu_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [15:0] inA;
reg [15:0] inB;
reg [3:0] op;
// wires                                               
wire [3:0]  SZCV;
wire [15:0]  out;

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.SZCV(SZCV),
	.inA(inA),
	.inB(inB),
	.op(op),
	.out(out)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
op <= 4'b0000;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;

// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#100
op <= 4'b0000;
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;
#100
inA <= 16'b0111_1111_1111_1111;
inB <= 16'b0000_0000_0000_0001;

#100
op <= 4'b0001;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;
#100
inA <= 16'b0111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;
#100
inA <= 16'b1000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0001;

#100
op <= 4'b0010;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b0011;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b0100;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b0101;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b0110;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b0111;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;






#100
op <= 4'b1000;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1001;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1010;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1011;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1100;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1101;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1110;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100
op <= 4'b1111;
inA <= 16'b0000_0000_0000_0000;
inB <= 16'b0000_0000_0000_0000;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b0000_0000_1111_1111;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b0000_1111_0000_1111;
#100
inA <= 16'b1111_1111_0000_0000;
inB <= 16'b1111_0000_1111_0000;
#100
inA <= 16'b1111_1111_1111_1111;
inB <= 16'b1111_1111_1111_1111;

#100

@eachvec;                                              
// --> end                                             
end                                                    
endmodule

