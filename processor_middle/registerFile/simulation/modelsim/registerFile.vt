// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/22/2022 17:00:37"
                                                                                
// Verilog Test Bench template for design : registerFile
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module registerFile_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [2:0] Rd;
reg [2:0] Rs;
reg changeEnable;
reg clock;
reg regWrite;
reg reset;
reg [15:0] writeData;
reg [2:0] writeRegister;
// wires                                               
wire [15:0]  AR;
wire [15:0]  BR;

// assign statements (if any)                          
registerFile i1 (
// port map - connection between master ports and signals/registers   
	.AR(AR),
	.BR(BR),
	.Rd(Rd),
	.Rs(Rs),
	.changeEnable(changeEnable),
	.clock(clock),
	.regWrite(regWrite),
	.reset(reset),
	.writeData(writeData),
	.writeRegister(writeRegister)
);
initial                                                
begin                                                  
                     
Rs <= 0;
Rd <= 1;
regWrite <= 1;
clock <= 0;
reset <= 0;
changeEnable <= 1;
                                           
$display("Running testbench");                       
end   
always begin
#50
clock <= ~clock;
end

always begin
#100
Rs <= Rs + 1;
Rd <= Rd + 1;
end

always                                                 
begin 
writeData <= 16'b1111_1111_1111_1111;
writeRegister <= 0;   
#100
writeRegister <= 1;
writeData <= 16'b1111_1111_1111_1111;
#100        
writeRegister <= 2;
writeData <= 16'b1111_1111_1111_1111;
#100 
writeRegister <= 3;
writeData <= 16'b1111_1111_1111_1111;
#100 
writeRegister <= 4;
writeData <= 16'b1111_1111_1111_1111;
#100          
writeRegister <= 5;   
writeData <= 16'b1111_1111_1111_1111;
#100
writeRegister <= 6;
writeData <= 16'b1111_1111_1111_1111;
#100        
writeRegister <= 7;
writeData <= 16'b1111_1111_1111_1111;
#100

changeEnable <= 0;
regWrite <= 0; 
writeData <= 16'h f0f0;
writeRegister <= 0;   
#100
writeRegister <= 1;
writeData <= 16'h 0f0f;
#100        
writeRegister <= 2;
writeData <= 16'h 0f00;
#100 
writeRegister <= 3;
writeData <= 16'h f000;
#100 
writeRegister <= 4;
writeData <= 16'h 000f;
#100          
writeRegister <= 5;   
writeData <= 16'h 00f0;
#100
writeRegister <= 6;
writeData <= 16'h 0f00;
#100        
writeRegister <= 7;
writeData <= 16'h f000;
#100
reset <= 1;

#500
reset <= 0;
regWrite <= 0; 
writeData <= 16'h f0f0;
writeRegister <= 0;   
#100
writeRegister <= 1;
writeData <= 16'h 0f0f;
#100        
writeRegister <= 2;
writeData <= 16'h 0f00;
#100 
writeRegister <= 3;
writeData <= 16'h f000;
#100 
writeRegister <= 4;
writeData <= 16'h 000f;
#100          
writeRegister <= 5;   
writeData <= 16'h 00f0;
#100
writeRegister <= 6;
writeData <= 16'h 0f00;
#100        
writeRegister <= 7;
writeData <= 16'h f000;
#100
reset <= 1;

#500
reset <= 0;
regWrite <= 1; 
writeData <= 16'h f0f0;
writeRegister <= 0;   
#100
writeRegister <= 1;
writeData <= 16'h 0f0f;
#100        
writeRegister <= 2;
writeData <= 16'h 0f00;
#100 
writeRegister <= 3;
writeData <= 16'h f000;
#100 
writeRegister <= 4;
writeData <= 16'h 000f;
#100          
writeRegister <= 5;   
writeData <= 16'h 00f0;
#100
writeRegister <= 6;
writeData <= 16'h 0f00;
#100        
writeRegister <= 7;
writeData <= 16'h f000;
#100
reset <= 1;

#500
reset <= 0;
changeEnable <= 0; 
writeData <= 16'h 0000;
writeRegister <= 0;   
#100
writeRegister <= 1;
writeData <= 16'h 0000;
#100        
writeRegister <= 2;
writeData <= 16'h 0000;
#100 
writeRegister <= 3;
writeData <= 16'h 0000;
#100 
writeRegister <= 4;
writeData <= 16'h 0000;
#100          
writeRegister <= 5;   
writeData <= 16'h 0000;
#100
writeRegister <= 6;
writeData <= 16'h 0000;
#100        
writeRegister <= 7;
writeData <= 16'h 0000;                                                                                      
end                                                    
endmodule



