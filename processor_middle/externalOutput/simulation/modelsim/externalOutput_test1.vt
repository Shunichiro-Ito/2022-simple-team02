// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/28/2022 03:11:34"
                                                                                
// Verilog Test Bench template for design : externalOutput
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module externalOutput_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [15:0] AR;
reg changeEnable;
reg clock;
reg outputEnable;
reg reset;
// wires                                               
wire [7:0]  SEG_A;
wire [7:0]  SEG_B;
wire [7:0]  SEG_C;
wire [7:0]  SEG_D;
wire [7:0]  SEG_E;
wire [7:0]  SEG_F;
wire [7:0]  SEG_G;
wire [7:0]  SEG_H;
wire [7:0]  select;

// assign statements (if any)                          
externalOutput i1 (
// port map - connection between master ports and signals/registers   
	.AR(AR),
	.SEG_A(SEG_A),
	.SEG_B(SEG_B),
	.SEG_C(SEG_C),
	.SEG_D(SEG_D),
	.SEG_E(SEG_E),
	.SEG_F(SEG_F),
	.SEG_G(SEG_G),
	.SEG_H(SEG_H),
	.changeEnable(changeEnable),
	.clock(clock),
	.outputEnable(outputEnable),
	.reset(reset),
	.select(select)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
AR <= 16'b0000_0000_0000_0000;
changeEnable <= 1'b0;
clock <= 1'b0;
outputEnable <= 1'b0;
reset <= 1'b0;

// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
changeEnable <= 1'b1;
outputEnable <= 1'b1;
AR <= 16'b0011_0011_0011_0011;
clock <= ~clock;
#100
clock <= ~clock;
#100
outputEnable <= 1'b0;
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
changeEnable <= 1'b1;
outputEnable <= 1'b1;
AR <= 16'b1100_1100_1100_1100;
clock <= ~clock;
#100
clock <= ~clock;
#100
outputEnable <= 1'b0;
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
changeEnable <= 1'b0;
outputEnable <= 1'b1;
AR <= 16'b1100_1100_1100_1100;
clock <= ~clock;
#100
clock <= ~clock;
#100
outputEnable <= 1'b0;
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
changeEnable <= 1'b1;
AR <= 16'b1100_1100_1100_1100;
clock <= ~clock;
#50
outputEnable <= 1'b1;
#50
clock <= ~clock;
#100
outputEnable <= 1'b0;
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
changeEnable <= 1'b1;
outputEnable <= 1'b1;
AR <= 16'b1100_1100_1100_1100;
clock <= ~clock;
#100
clock <= ~clock;
#100
outputEnable <= 1'b0;
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;

#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
#100
clock <= ~clock;
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

