// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/29/2022 14:17:30"
                                                                                
// Verilog Test Bench template for design : processor
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module processor_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg exec;
reg [15:0] externalInput;
reg reset;
// wires                                               
wire [15:0]  address_memory_output;
wire addressSrc_output;
wire [3:0]  ALUOp_output;
wire ALUSrcAR_output;
wire ALUSrcBR_output;
wire [15:0]  AR_output;
wire [15:0]  BR_output;
wire branch_output;
wire [15:0]  DR_output;
wire DRSrc_output;
wire [15:0]  external_output;
wire inputEnable_output;
wire [15:0]  instruction_output;
wire [15:0]  MDR_output1;
wire memToReg_output;
wire memWrite_output;
wire [15:0]  nextPC_output;
wire outputEnable_output;
wire p1_output;
wire p1AndSystemRunning_output;
wire p2_output;
wire p2AndSystemRunning_output;
wire p3_output;
wire p3AndSystemRunning_output;
wire p3to4_output;
wire p4_output;
wire p4AndSystemRunning_output;
wire p5_output;
wire p5AndSystemRunning_output;
wire [15:0]  PC_output;
wire [15:0]  readData_memory_output;
wire regDst_output;
wire regWrite_output;
wire systemRunning_output;
wire [3:0]  SZCV_cur_output;
wire [3:0]  SZCV_pre_output;
wire wire_exec_output;
wire wire_reset_output;
wire wren_memory_output;
wire [15:0]  writeData;
wire [2:0]  writeRegister;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.address_memory_output(address_memory_output),
	.addressSrc_output(addressSrc_output),
	.ALUOp_output(ALUOp_output),
	.ALUSrcAR_output(ALUSrcAR_output),
	.ALUSrcBR_output(ALUSrcBR_output),
	.AR_output(AR_output),
	.BR_output(BR_output),
	.branch_output(branch_output),
	.clock(clock),
	.DR_output(DR_output),
	.DRSrc_output(DRSrc_output),
	.exec(exec),
	.external_output(external_output),
	.externalInput(externalInput),
	.inputEnable_output(inputEnable_output),
	.instruction_output(instruction_output),
	.MDR_output1(MDR_output1),
	.memToReg_output(memToReg_output),
	.memWrite_output(memWrite_output),
	.nextPC_output(nextPC_output),
	.outputEnable_output(outputEnable_output),
	.p1_output(p1_output),
	.p1AndSystemRunning_output(p1AndSystemRunning_output),
	.p2_output(p2_output),
	.p2AndSystemRunning_output(p2AndSystemRunning_output),
	.p3_output(p3_output),
	.p3AndSystemRunning_output(p3AndSystemRunning_output),
	.p3to4_output(p3to4_output),
	.p4_output(p4_output),
	.p4AndSystemRunning_output(p4AndSystemRunning_output),
	.p5_output(p5_output),
	.p5AndSystemRunning_output(p5AndSystemRunning_output),
	.PC_output(PC_output),
	.readData_memory_output(readData_memory_output),
	.regDst_output(regDst_output),
	.regWrite_output(regWrite_output),
	.reset(reset),
	.systemRunning_output(systemRunning_output),
	.SZCV_cur_output(SZCV_cur_output),
	.SZCV_pre_output(SZCV_pre_output),
	.wire_exec_output(wire_exec_output),
	.wire_reset_output(wire_reset_output),
	.wren_memory_output(wren_memory_output),
	.writeData(writeData),
	.writeRegister(writeRegister)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	reset <= 0;//pushed
	exec <= 1;//not pushed 
	clock <= 0;
	externalInput <= 16'h f0f0;                                                             
// --> end                                             
$display("Running testbench");                       
end   

always begin
#50
	clock <= ~clock;
end

always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
	#200
	reset <= 1;
	#100
	exec <= 0;
	#1800
	exec <= 1;
	#1800 //3900
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

